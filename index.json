{
    "benchmarks": {
        "bench_app.LaplaceInplace.time_it": {
            "code": "def time_it(self, update):\n    self.run()\n",
            "goal_time": 0.25,
            "name": "bench_app.LaplaceInplace.time_it",
            "number": 0,
            "param_names": [
                "update"
            ],
            "params": [
                [
                    "'inplace'",
                    "'normal'"
                ]
            ],
            "pretty_name": "bench_app.LaplaceInplace.time_it",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_app.MaxesOfDots.time_it": {
            "code": "def time_it(self):\n    self.maxes_of_dots(self.arrays)\n",
            "goal_time": 0.25,
            "name": "bench_app.MaxesOfDots.time_it",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_app.MaxesOfDots.time_it",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_arange_100": {
            "code": "def time_arange_100(self):\n    np.arange(100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_arange_100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_arange_100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_array_1": {
            "code": "def time_array_1(self):\n    np.array(1)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_array_1",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_array_1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_array_empty": {
            "code": "def time_array_empty(self):\n    np.array([])\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_array_empty",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_array_empty",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_array_l": {
            "code": "def time_array_l(self):\n    np.array(self.l)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_array_l",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_array_l",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_array_l1": {
            "code": "def time_array_l1(self):\n    np.array([1])\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_array_l1",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_array_l1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_array_l100": {
            "code": "def time_array_l100(self):\n    np.array(self.l100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_array_l100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_array_l100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_diag_l100": {
            "code": "def time_diag_l100(self):\n    np.diag(self.l100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_diag_l100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_diag_l100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_diagflat_l100": {
            "code": "def time_diagflat_l100(self):\n    np.diagflat(self.l100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_diagflat_l100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_diagflat_l100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_diagflat_l50_l50": {
            "code": "def time_diagflat_l50_l50(self):\n    np.diagflat([self.l50, self.l50])\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_diagflat_l50_l50",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_diagflat_l50_l50",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_dstack_l": {
            "code": "def time_dstack_l(self):\n    np.dstack(self.l)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_dstack_l",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_dstack_l",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_empty_100": {
            "code": "def time_empty_100(self):\n    np.empty(100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_empty_100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_empty_100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_eye_100": {
            "code": "def time_eye_100(self):\n    np.eye(100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_eye_100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_eye_100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_eye_3000": {
            "code": "def time_eye_3000(self):\n    np.eye(3000)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_eye_3000",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_eye_3000",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_hstack_l": {
            "code": "def time_hstack_l(self):\n    np.hstack(self.l)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_hstack_l",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_hstack_l",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_identity_100": {
            "code": "def time_identity_100(self):\n    np.identity(100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_identity_100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_identity_100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_identity_3000": {
            "code": "def time_identity_3000(self):\n    np.identity(3000)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_identity_3000",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_identity_3000",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_ones_100": {
            "code": "def time_ones_100(self):\n    np.ones(100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_ones_100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_ones_100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_tril_l10x10": {
            "code": "def time_tril_l10x10(self):\n    np.tril(self.l10x10)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_tril_l10x10",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_tril_l10x10",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_triu_l10x10": {
            "code": "def time_triu_l10x10(self):\n    np.triu(self.l10x10)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_triu_l10x10",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_triu_l10x10",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_vstack_l": {
            "code": "def time_vstack_l(self):\n    np.vstack(self.l)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_vstack_l",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_vstack_l",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Core.time_zeros_100": {
            "code": "def time_zeros_100(self):\n    np.zeros(100)\n",
            "goal_time": 0.25,
            "name": "bench_core.Core.time_zeros_100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Core.time_zeros_100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.CorrConv.time_convolve": {
            "code": "def time_convolve(self, size1, size2, mode):\n    np.convolve(self.x1, self.x2, mode=mode)\n",
            "goal_time": 0.25,
            "name": "bench_core.CorrConv.time_convolve",
            "number": 0,
            "param_names": [
                "size1",
                "size2",
                "mode"
            ],
            "params": [
                [
                    "50",
                    "1000",
                    "100000.0"
                ],
                [
                    "10",
                    "100",
                    "1000",
                    "10000.0"
                ],
                [
                    "'valid'",
                    "'same'",
                    "'full'"
                ]
            ],
            "pretty_name": "bench_core.CorrConv.time_convolve",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.CorrConv.time_correlate": {
            "code": "def time_correlate(self, size1, size2, mode):\n    np.correlate(self.x1, self.x2, mode=mode)\n",
            "goal_time": 0.25,
            "name": "bench_core.CorrConv.time_correlate",
            "number": 0,
            "param_names": [
                "size1",
                "size2",
                "mode"
            ],
            "params": [
                [
                    "50",
                    "1000",
                    "100000.0"
                ],
                [
                    "10",
                    "100",
                    "1000",
                    "10000.0"
                ],
                [
                    "'valid'",
                    "'same'",
                    "'full'"
                ]
            ],
            "pretty_name": "bench_core.CorrConv.time_correlate",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.CountNonzero.time_count_nonzero": {
            "code": "def time_count_nonzero(self, numaxes, size, dtype):\n    np.count_nonzero(self.x)\n",
            "goal_time": 0.25,
            "name": "bench_core.CountNonzero.time_count_nonzero",
            "number": 0,
            "param_names": [
                "numaxes",
                "size",
                "dtype"
            ],
            "params": [
                [
                    "1",
                    "2",
                    "3"
                ],
                [
                    "100",
                    "10000",
                    "1000000"
                ],
                [
                    "<class 'bool'>",
                    "<class 'int'>",
                    "<class 'str'>",
                    "<class 'object'>"
                ]
            ],
            "pretty_name": "bench_core.CountNonzero.time_count_nonzero",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.CountNonzero.time_count_nonzero_axis": {
            "code": "def time_count_nonzero_axis(self, numaxes, size, dtype):\n    np.count_nonzero(self.x, axis=self.x.ndim - 1)\n",
            "goal_time": 0.25,
            "name": "bench_core.CountNonzero.time_count_nonzero_axis",
            "number": 0,
            "param_names": [
                "numaxes",
                "size",
                "dtype"
            ],
            "params": [
                [
                    "1",
                    "2",
                    "3"
                ],
                [
                    "100",
                    "10000",
                    "1000000"
                ],
                [
                    "<class 'bool'>",
                    "<class 'int'>",
                    "<class 'str'>",
                    "<class 'object'>"
                ]
            ],
            "pretty_name": "bench_core.CountNonzero.time_count_nonzero_axis",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.CountNonzero.time_count_nonzero_multi_axis": {
            "code": "def time_count_nonzero_multi_axis(self, numaxes, size, dtype):\n    if self.x.ndim >= 2:\n        np.count_nonzero(self.x, axis=(\n            self.x.ndim - 1, self.x.ndim - 2))\n",
            "goal_time": 0.25,
            "name": "bench_core.CountNonzero.time_count_nonzero_multi_axis",
            "number": 0,
            "param_names": [
                "numaxes",
                "size",
                "dtype"
            ],
            "params": [
                [
                    "1",
                    "2",
                    "3"
                ],
                [
                    "100",
                    "10000",
                    "1000000"
                ],
                [
                    "<class 'bool'>",
                    "<class 'int'>",
                    "<class 'str'>",
                    "<class 'object'>"
                ]
            ],
            "pretty_name": "bench_core.CountNonzero.time_count_nonzero_multi_axis",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Indices.time_indices": {
            "code": "def time_indices(self):\n    np.indices((1000, 500))\n",
            "goal_time": 0.25,
            "name": "bench_core.Indices.time_indices",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Indices.time_indices",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.PackBits.time_packbits": {
            "code": "def time_packbits(self, dtype):\n    np.packbits(self.d)\n",
            "goal_time": 0.25,
            "name": "bench_core.PackBits.time_packbits",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'bool'>",
                    "<class 'numpy.uint64'>"
                ]
            ],
            "pretty_name": "bench_core.PackBits.time_packbits",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.PackBits.time_packbits_axis0": {
            "code": "def time_packbits_axis0(self, dtype):\n    np.packbits(self.d2, axis=0)\n",
            "goal_time": 0.25,
            "name": "bench_core.PackBits.time_packbits_axis0",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'bool'>",
                    "<class 'numpy.uint64'>"
                ]
            ],
            "pretty_name": "bench_core.PackBits.time_packbits_axis0",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.PackBits.time_packbits_axis1": {
            "code": "def time_packbits_axis1(self, dtype):\n    np.packbits(self.d2, axis=1)\n",
            "goal_time": 0.25,
            "name": "bench_core.PackBits.time_packbits_axis1",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'bool'>",
                    "<class 'numpy.uint64'>"
                ]
            ],
            "pretty_name": "bench_core.PackBits.time_packbits_axis1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Temporaries.time_large": {
            "code": "def time_large(self):\n    (self.alarge * 2) + self.blarge\n",
            "goal_time": 0.25,
            "name": "bench_core.Temporaries.time_large",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Temporaries.time_large",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Temporaries.time_large2": {
            "code": "def time_large2(self):\n    (self.alarge + self.blarge) - 2\n",
            "goal_time": 0.25,
            "name": "bench_core.Temporaries.time_large2",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Temporaries.time_large2",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Temporaries.time_mid": {
            "code": "def time_mid(self):\n    (self.amid * 2) + self.bmid\n",
            "goal_time": 0.25,
            "name": "bench_core.Temporaries.time_mid",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Temporaries.time_mid",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.Temporaries.time_mid2": {
            "code": "def time_mid2(self):\n    (self.amid + self.bmid) - 2\n",
            "goal_time": 0.25,
            "name": "bench_core.Temporaries.time_mid2",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.Temporaries.time_mid2",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.UnpackBits.time_unpackbits": {
            "code": "def time_unpackbits(self):\n    np.unpackbits(self.d)\n",
            "goal_time": 0.25,
            "name": "bench_core.UnpackBits.time_unpackbits",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.UnpackBits.time_unpackbits",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.UnpackBits.time_unpackbits_axis0": {
            "code": "def time_unpackbits_axis0(self):\n    np.unpackbits(self.d2, axis=0)\n",
            "goal_time": 0.25,
            "name": "bench_core.UnpackBits.time_unpackbits_axis0",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.UnpackBits.time_unpackbits_axis0",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_core.UnpackBits.time_unpackbits_axis1": {
            "code": "def time_unpackbits_axis1(self):\n    np.unpackbits(self.d2, axis=1)\n",
            "goal_time": 0.25,
            "name": "bench_core.UnpackBits.time_unpackbits_axis1",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_core.UnpackBits.time_unpackbits_axis1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Bincount.time_bincount": {
            "code": "def time_bincount(self):\n    np.bincount(self.d)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Bincount.time_bincount",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Bincount.time_bincount",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Bincount.time_weights": {
            "code": "def time_weights(self):\n    np.bincount(self.d, weights=self.e)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Bincount.time_weights",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Bincount.time_weights",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Histogram1D.time_fine_binning": {
            "code": "def time_fine_binning(self):\n    np.histogram(self.d, 10000, (0, 100))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Histogram1D.time_fine_binning",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Histogram1D.time_fine_binning",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Histogram1D.time_full_coverage": {
            "code": "def time_full_coverage(self):\n    np.histogram(self.d, 200, (0, 100))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Histogram1D.time_full_coverage",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Histogram1D.time_full_coverage",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Histogram1D.time_small_coverage": {
            "code": "def time_small_coverage(self):\n    np.histogram(self.d, 200, (50, 51))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Histogram1D.time_small_coverage",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Histogram1D.time_small_coverage",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Histogram2D.time_fine_binning": {
            "code": "def time_fine_binning(self):\n    np.histogramdd(self.d, (10000, 10000), ((0, 100), (0, 100)))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Histogram2D.time_fine_binning",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Histogram2D.time_fine_binning",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Histogram2D.time_full_coverage": {
            "code": "def time_full_coverage(self):\n    np.histogramdd(self.d, (200, 200), ((0, 100), (0, 100)))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Histogram2D.time_full_coverage",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Histogram2D.time_full_coverage",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Histogram2D.time_small_coverage": {
            "code": "def time_small_coverage(self):\n    np.histogramdd(self.d, (200, 200), ((50, 51), (50, 51)))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Histogram2D.time_small_coverage",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Histogram2D.time_small_coverage",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Median.time_even": {
            "code": "def time_even(self):\n    np.median(self.e)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Median.time_even",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Median.time_even",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Median.time_even_inplace": {
            "code": "def time_even_inplace(self):\n    np.median(self.e, overwrite_input=True)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Median.time_even_inplace",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Median.time_even_inplace",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Median.time_even_small": {
            "code": "def time_even_small(self):\n    np.median(self.e[:500], overwrite_input=True)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Median.time_even_small",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Median.time_even_small",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Median.time_odd": {
            "code": "def time_odd(self):\n    np.median(self.o)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Median.time_odd",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Median.time_odd",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Median.time_odd_inplace": {
            "code": "def time_odd_inplace(self):\n    np.median(self.o, overwrite_input=True)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Median.time_odd_inplace",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Median.time_odd_inplace",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Median.time_odd_small": {
            "code": "def time_odd_small(self):\n    np.median(self.o[:500], overwrite_input=True)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Median.time_odd_small",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Median.time_odd_small",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Percentile.time_percentile": {
            "code": "def time_percentile(self):\n    np.percentile(self.e, [25, 35, 55, 65, 75])\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Percentile.time_percentile",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Percentile.time_percentile",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Percentile.time_quartile": {
            "code": "def time_quartile(self):\n    np.percentile(self.e, [25, 75])\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Percentile.time_quartile",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Percentile.time_quartile",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Select.time_select": {
            "code": "def time_select(self):\n    np.select(self.cond, [self.d, self.e])\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Select.time_select",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Select.time_select",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Select.time_select_larger": {
            "code": "def time_select_larger(self):\n    np.select(self.cond_large, ([self.d, self.e] * 10))\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Select.time_select_larger",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Select.time_select_larger",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_argsort": {
            "code": "def time_argsort(self):\n    self.e.argsort()\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_argsort",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_argsort",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_argsort_random": {
            "code": "def time_argsort_random(self):\n    self.o.argsort()\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_argsort_random",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_argsort_random",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_sort": {
            "code": "def time_sort(self):\n    np.sort(self.e)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_sort",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_sort",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_sort_equal": {
            "code": "def time_sort_equal(self):\n    self.equal.sort()\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_sort_equal",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_sort_equal",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_sort_inplace": {
            "code": "def time_sort_inplace(self):\n    self.e.sort()\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_sort_inplace",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_sort_inplace",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_sort_many_equal": {
            "code": "def time_sort_many_equal(self):\n    self.many_equal.sort()\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_sort_many_equal",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_sort_many_equal",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_sort_random": {
            "code": "def time_sort_random(self):\n    np.sort(self.o)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_sort_random",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_sort_random",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Sort.time_sort_worst": {
            "code": "def time_sort_worst(self):\n    np.sort(self.worst)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Sort.time_sort_worst",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Sort.time_sort_worst",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Where.time_1": {
            "code": "def time_1(self):\n    np.where(self.cond)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Where.time_1",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Where.time_1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Where.time_2": {
            "code": "def time_2(self):\n    np.where(self.cond, self.d, self.e)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Where.time_2",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Where.time_2",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_function_base.Where.time_2_broadcast": {
            "code": "def time_2_broadcast(self):\n    np.where(self.cond, self.d, 0)\n",
            "goal_time": 0.25,
            "name": "bench_function_base.Where.time_2_broadcast",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_function_base.Where.time_2_broadcast",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.Indexing.time_op": {
            "code": "def time_op(self, indexes, sel, op):\n    self.func()\n",
            "goal_time": 0.25,
            "name": "bench_indexing.Indexing.time_op",
            "number": 0,
            "param_names": [
                "indexes",
                "sel",
                "op"
            ],
            "params": [
                [
                    "'indexes_'",
                    "'indexes_rand_'"
                ],
                [
                    "'I'",
                    "':,I'",
                    "'np.ix_(I, I)'"
                ],
                [
                    "''",
                    "'=1'"
                ]
            ],
            "pretty_name": "bench_indexing.Indexing.time_op",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing": {
            "code": "def time_mmap_fancy_indexing(self):\n    for i in range(1000):\n        self.fp[self.indexes]\n",
            "goal_time": 0.25,
            "name": "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.IndexingSeparate.time_mmap_slicing": {
            "code": "def time_mmap_slicing(self):\n    for i in range(1000):\n        self.fp[5:10]\n",
            "goal_time": 0.25,
            "name": "bench_indexing.IndexingSeparate.time_mmap_slicing",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_indexing.IndexingSeparate.time_mmap_slicing",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.IndexingStructured0D.time_array_all": {
            "code": "def time_array_all(self):\n    self.B['a'] = self.A['a']\n",
            "goal_time": 0.25,
            "name": "bench_indexing.IndexingStructured0D.time_array_all",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_indexing.IndexingStructured0D.time_array_all",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.IndexingStructured0D.time_array_slice": {
            "code": "def time_array_slice(self):\n    self.B['a'][:] = self.A['a']\n",
            "goal_time": 0.25,
            "name": "bench_indexing.IndexingStructured0D.time_array_slice",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_indexing.IndexingStructured0D.time_array_slice",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.IndexingStructured0D.time_scalar_all": {
            "code": "def time_scalar_all(self):\n    self.b['a'] = self.a['a']\n",
            "goal_time": 0.25,
            "name": "bench_indexing.IndexingStructured0D.time_scalar_all",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_indexing.IndexingStructured0D.time_scalar_all",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_indexing.IndexingStructured0D.time_scalar_slice": {
            "code": "def time_scalar_slice(self):\n    self.b['a'][:] = self.a['a']\n",
            "goal_time": 0.25,
            "name": "bench_indexing.IndexingStructured0D.time_scalar_slice",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_indexing.IndexingStructured0D.time_scalar_slice",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.Copy.time_cont_assign": {
            "code": "def time_cont_assign(self, typename):\n    self.d[...] = 1\n",
            "goal_time": 0.25,
            "name": "bench_io.Copy.time_cont_assign",
            "number": 0,
            "param_names": [
                "type"
            ],
            "params": [
                [
                    "'int8'",
                    "'int16'",
                    "'float32'",
                    "'float64'",
                    "'complex64'",
                    "'complex128'"
                ]
            ],
            "pretty_name": "bench_io.Copy.time_cont_assign",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.Copy.time_memcpy": {
            "code": "def time_memcpy(self, typename):\n    self.d[...] = self.e_d\n",
            "goal_time": 0.25,
            "name": "bench_io.Copy.time_memcpy",
            "number": 0,
            "param_names": [
                "type"
            ],
            "params": [
                [
                    "'int8'",
                    "'int16'",
                    "'float32'",
                    "'float64'",
                    "'complex64'",
                    "'complex128'"
                ]
            ],
            "pretty_name": "bench_io.Copy.time_memcpy",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.Copy.time_strided_assign": {
            "code": "def time_strided_assign(self, typename):\n    self.dflat[::2] = 2\n",
            "goal_time": 0.25,
            "name": "bench_io.Copy.time_strided_assign",
            "number": 0,
            "param_names": [
                "type"
            ],
            "params": [
                [
                    "'int8'",
                    "'int16'",
                    "'float32'",
                    "'float64'",
                    "'complex64'",
                    "'complex128'"
                ]
            ],
            "pretty_name": "bench_io.Copy.time_strided_assign",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.Copy.time_strided_copy": {
            "code": "def time_strided_copy(self, typename):\n    self.d[...] = self.e.T\n",
            "goal_time": 0.25,
            "name": "bench_io.Copy.time_strided_copy",
            "number": 0,
            "param_names": [
                "type"
            ],
            "params": [
                [
                    "'int8'",
                    "'int16'",
                    "'float32'",
                    "'float64'",
                    "'complex64'",
                    "'complex128'"
                ]
            ],
            "pretty_name": "bench_io.Copy.time_strided_copy",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.CopyTo.time_copyto": {
            "code": "def time_copyto(self):\n    np.copyto(self.d, self.e)\n",
            "goal_time": 0.25,
            "name": "bench_io.CopyTo.time_copyto",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_io.CopyTo.time_copyto",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.CopyTo.time_copyto_8_dense": {
            "code": "def time_copyto_8_dense(self):\n    np.copyto(self.d, self.e, where=self.im8)\n",
            "goal_time": 0.25,
            "name": "bench_io.CopyTo.time_copyto_8_dense",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_io.CopyTo.time_copyto_8_dense",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.CopyTo.time_copyto_8_sparse": {
            "code": "def time_copyto_8_sparse(self):\n    np.copyto(self.d, self.e, where=self.m8)\n",
            "goal_time": 0.25,
            "name": "bench_io.CopyTo.time_copyto_8_sparse",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_io.CopyTo.time_copyto_8_sparse",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.CopyTo.time_copyto_dense": {
            "code": "def time_copyto_dense(self):\n    np.copyto(self.d, self.e, where=self.im)\n",
            "goal_time": 0.25,
            "name": "bench_io.CopyTo.time_copyto_dense",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_io.CopyTo.time_copyto_dense",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.CopyTo.time_copyto_sparse": {
            "code": "def time_copyto_sparse(self):\n    np.copyto(self.d, self.e, where=self.m)\n",
            "goal_time": 0.25,
            "name": "bench_io.CopyTo.time_copyto_sparse",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_io.CopyTo.time_copyto_sparse",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_io.Savez.time_vb_savez_squares": {
            "code": "def time_vb_savez_squares(self):\n    np.savez('tmp.npz', self.squares)\n",
            "goal_time": 0.25,
            "name": "bench_io.Savez.time_vb_savez_squares",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_io.Savez.time_vb_savez_squares",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_lib.Pad.time_pad": {
            "code": "def time_pad(self, shape, pad_width, mode):\n    np.pad(self.array, pad_width, mode)\n",
            "goal_time": 0.25,
            "name": "bench_lib.Pad.time_pad",
            "number": 0,
            "param_names": [
                "shape",
                "pad_width",
                "mode"
            ],
            "params": [
                [
                    "(1000,)",
                    "(10, 100)",
                    "(10, 10, 10)"
                ],
                [
                    "1",
                    "3",
                    "(0, 5)"
                ],
                [
                    "'constant'",
                    "'edge'",
                    "'linear_ramp'",
                    "'mean'",
                    "'reflect'",
                    "'wrap'"
                ]
            ],
            "pretty_name": "bench_lib.Pad.time_pad",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_dot_a_b": {
            "code": "def time_dot_a_b(self):\n    np.dot(self.a, self.b)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_dot_a_b",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_dot_a_b",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_dot_d_dot_b_c": {
            "code": "def time_dot_d_dot_b_c(self):\n    np.dot(self.d, np.dot(self.b, self.c))\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_dot_d_dot_b_c",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_dot_d_dot_b_c",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_dot_trans_a_at": {
            "code": "def time_dot_trans_a_at(self):\n    np.dot(self.a, self.at)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_dot_trans_a_at",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_dot_trans_a_at",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_dot_trans_a_atc": {
            "code": "def time_dot_trans_a_atc(self):\n    np.dot(self.a, self.atc)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_dot_trans_a_atc",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_dot_trans_a_atc",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_dot_trans_at_a": {
            "code": "def time_dot_trans_at_a(self):\n    np.dot(self.at, self.a)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_dot_trans_at_a",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_dot_trans_at_a",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_dot_trans_atc_a": {
            "code": "def time_dot_trans_atc_a(self):\n    np.dot(self.atc, self.a)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_dot_trans_atc_a",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_dot_trans_atc_a",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_einsum_i_ij_j": {
            "code": "def time_einsum_i_ij_j(self):\n    np.einsum('i,ij,j', self.d, self.b, self.c)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_einsum_i_ij_j",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_einsum_i_ij_j",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_einsum_ij_jk_a_b": {
            "code": "def time_einsum_ij_jk_a_b(self):\n    np.einsum('ij,jk', self.a, self.b)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_einsum_ij_jk_a_b",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_einsum_ij_jk_a_b",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_einsum_ijk_jil_kl": {
            "code": "def time_einsum_ijk_jil_kl(self):\n    np.einsum('ijk,jil->kl', self.a3, self.b3)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_einsum_ijk_jil_kl",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_einsum_ijk_jil_kl",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_inner_trans_a_a": {
            "code": "def time_inner_trans_a_a(self):\n    np.inner(self.a, self.a)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_inner_trans_a_a",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_inner_trans_a_a",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_inner_trans_a_ac": {
            "code": "def time_inner_trans_a_ac(self):\n    np.inner(self.a, self.ac)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_inner_trans_a_ac",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_inner_trans_a_ac",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_matmul_a_b": {
            "code": "def time_matmul_a_b(self):\n    np.matmul(self.a, self.b)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_matmul_a_b",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_matmul_a_b",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_matmul_d_matmul_b_c": {
            "code": "def time_matmul_d_matmul_b_c(self):\n    np.matmul(self.d, np.matmul(self.b, self.c))\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_matmul_d_matmul_b_c",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_matmul_d_matmul_b_c",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_matmul_trans_a_at": {
            "code": "def time_matmul_trans_a_at(self):\n    np.matmul(self.a, self.at)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_matmul_trans_a_at",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_matmul_trans_a_at",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_matmul_trans_a_atc": {
            "code": "def time_matmul_trans_a_atc(self):\n    np.matmul(self.a, self.atc)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_matmul_trans_a_atc",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_matmul_trans_a_atc",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_matmul_trans_at_a": {
            "code": "def time_matmul_trans_at_a(self):\n    np.matmul(self.at, self.a)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_matmul_trans_at_a",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_matmul_trans_at_a",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_matmul_trans_atc_a": {
            "code": "def time_matmul_trans_atc_a(self):\n    np.matmul(self.atc, self.a)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_matmul_trans_atc_a",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_matmul_trans_atc_a",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1": {
            "code": "def time_tensordot_a_b_axes_1_0_0_1(self):\n    np.tensordot(self.a3, self.b3, axes=([1, 0], [0, 1]))\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Linalg.time_op": {
            "code": "def time_op(self, op, typename):\n    self.func(self.a)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Linalg.time_op",
            "number": 0,
            "param_names": [
                "op",
                "type"
            ],
            "params": [
                [
                    "'svd'",
                    "'pinv'",
                    "'det'",
                    "'norm'"
                ],
                [
                    "'int16'",
                    "'float16'",
                    "'int32'",
                    "'float32'",
                    "'int64'",
                    "'float64'",
                    "'complex64'",
                    "'longfloat'",
                    "'complex128'",
                    "'complex256'"
                ]
            ],
            "pretty_name": "bench_linalg.Linalg.time_op",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64": {
            "code": "def time_numpy_linalg_lstsq_a__b_float64(self):\n    np.linalg.lstsq(self.a, self.b)\n",
            "goal_time": 0.25,
            "name": "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.Concatenate.time_it": {
            "code": "def time_it(self, mode, n):\n    np.ma.concatenate(self.args)\n",
            "goal_time": 0.25,
            "name": "bench_ma.Concatenate.time_it",
            "number": 0,
            "param_names": [
                "mode",
                "n"
            ],
            "params": [
                [
                    "'ndarray'",
                    "'unmasked'",
                    "'ndarray+masked'",
                    "'unmasked+masked'",
                    "'masked'"
                ],
                [
                    "2",
                    "100",
                    "2000"
                ]
            ],
            "pretty_name": "bench_ma.Concatenate.time_it",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.Indexing.time_0d": {
            "code": "def time_0d(self, masked, ndim, size):\n    self.m[self.idx_0d]\n",
            "goal_time": 0.25,
            "name": "bench_ma.Indexing.time_0d",
            "number": 0,
            "param_names": [
                "masked",
                "ndim",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "1",
                    "2"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.Indexing.time_0d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.Indexing.time_1d": {
            "code": "def time_1d(self, masked, ndim, size):\n    self.m[self.idx_1d]\n",
            "goal_time": 0.25,
            "name": "bench_ma.Indexing.time_1d",
            "number": 0,
            "param_names": [
                "masked",
                "ndim",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "1",
                    "2"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.Indexing.time_1d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.Indexing.time_scalar": {
            "code": "def time_scalar(self, masked, ndim, size):\n    self.m[self.idx_scalar]\n",
            "goal_time": 0.25,
            "name": "bench_ma.Indexing.time_scalar",
            "number": 0,
            "param_names": [
                "masked",
                "ndim",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "1",
                    "2"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.Indexing.time_scalar",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.MA.time_masked_array": {
            "code": "def time_masked_array(self):\n    np.ma.masked_array()\n",
            "goal_time": 0.25,
            "name": "bench_ma.MA.time_masked_array",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ma.MA.time_masked_array",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.MA.time_masked_array_l100": {
            "code": "def time_masked_array_l100(self):\n    np.ma.masked_array(self.l100)\n",
            "goal_time": 0.25,
            "name": "bench_ma.MA.time_masked_array_l100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ma.MA.time_masked_array_l100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.MA.time_masked_array_l100_t100": {
            "code": "def time_masked_array_l100_t100(self):\n    np.ma.masked_array(self.l100, self.t100)\n",
            "goal_time": 0.25,
            "name": "bench_ma.MA.time_masked_array_l100_t100",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ma.MA.time_masked_array_l100_t100",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.UFunc.time_1d": {
            "code": "def time_1d(self, a_masked, b_masked, size):\n    np.ma.add(self.a_1d, self.b_1d)\n",
            "goal_time": 0.25,
            "name": "bench_ma.UFunc.time_1d",
            "number": 0,
            "param_names": [
                "a_masked",
                "b_masked",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "True",
                    "False"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.UFunc.time_1d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.UFunc.time_2d": {
            "code": "def time_2d(self, a_masked, b_masked, size):\n    # broadcasting happens this time\n    np.ma.add(self.a_2d, self.b_2d)\n",
            "goal_time": 0.25,
            "name": "bench_ma.UFunc.time_2d",
            "number": 0,
            "param_names": [
                "a_masked",
                "b_masked",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "True",
                    "False"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.UFunc.time_2d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.UFunc.time_scalar": {
            "code": "def time_scalar(self, a_masked, b_masked, size):\n    np.ma.add(self.a_scalar, self.b_scalar)\n",
            "goal_time": 0.25,
            "name": "bench_ma.UFunc.time_scalar",
            "number": 0,
            "param_names": [
                "a_masked",
                "b_masked",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "True",
                    "False"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.UFunc.time_scalar",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ma.UFunc.time_scalar_1d": {
            "code": "def time_scalar_1d(self, a_masked, b_masked, size):\n    np.ma.add(self.a_scalar, self.b_1d)\n",
            "goal_time": 0.25,
            "name": "bench_ma.UFunc.time_scalar_1d",
            "number": 0,
            "param_names": [
                "a_masked",
                "b_masked",
                "size"
            ],
            "params": [
                [
                    "True",
                    "False"
                ],
                [
                    "True",
                    "False"
                ],
                [
                    "10",
                    "100",
                    "1000"
                ]
            ],
            "pretty_name": "bench_ma.UFunc.time_scalar_1d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Permutation.time_permutation_1d": {
            "code": "def time_permutation_1d(self):\n    np.random.permutation(self.a_1d)\n",
            "goal_time": 0.25,
            "name": "bench_random.Permutation.time_permutation_1d",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_random.Permutation.time_permutation_1d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Permutation.time_permutation_2d": {
            "code": "def time_permutation_2d(self):\n    np.random.permutation(self.a_2d)        \n",
            "goal_time": 0.25,
            "name": "bench_random.Permutation.time_permutation_2d",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_random.Permutation.time_permutation_2d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Permutation.time_permutation_int": {
            "code": "def time_permutation_int(self):\n    np.random.permutation(self.n)\n",
            "goal_time": 0.25,
            "name": "bench_random.Permutation.time_permutation_int",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_random.Permutation.time_permutation_int",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Randint.time_randint_fast": {
            "code": "def time_randint_fast(self):\n    \"\"\"Compare to uint32 below\"\"\"\n    np.random.randint(0, 2**30, size=10**5)\n",
            "goal_time": 0.25,
            "name": "bench_random.Randint.time_randint_fast",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_random.Randint.time_randint_fast",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Randint.time_randint_slow": {
            "code": "def time_randint_slow(self):\n    \"\"\"Compare to uint32 below\"\"\"\n    np.random.randint(0, 2**30 + 1, size=10**5)\n",
            "goal_time": 0.25,
            "name": "bench_random.Randint.time_randint_slow",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_random.Randint.time_randint_slow",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Randint_dtype.time_randint_fast": {
            "code": "def time_randint_fast(self, name):\n    high = self.high[name]\n    np.random.randint(0, high, size=10**5, dtype=name)\n",
            "goal_time": 0.25,
            "name": "bench_random.Randint_dtype.time_randint_fast",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "'bool'",
                    "'uint8'",
                    "'uint16'",
                    "'uint32'",
                    "'uint64'"
                ]
            ],
            "pretty_name": "bench_random.Randint_dtype.time_randint_fast",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Randint_dtype.time_randint_slow": {
            "code": "def time_randint_slow(self, name):\n    high = self.high[name]\n    np.random.randint(0, high + 1, size=10**5, dtype=name)\n",
            "goal_time": 0.25,
            "name": "bench_random.Randint_dtype.time_randint_slow",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "'bool'",
                    "'uint8'",
                    "'uint16'",
                    "'uint32'",
                    "'uint64'"
                ]
            ],
            "pretty_name": "bench_random.Randint_dtype.time_randint_slow",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Random.time_rng": {
            "code": "def time_rng(self, name):\n    self.func(*self.params)\n",
            "goal_time": 0.25,
            "name": "bench_random.Random.time_rng",
            "number": 0,
            "param_names": [
                "param1"
            ],
            "params": [
                [
                    "'normal'",
                    "'uniform'",
                    "'weibull 1'",
                    "'binomial 10 0.5'",
                    "'poisson 10'"
                ]
            ],
            "pretty_name": "bench_random.Random.time_rng",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_random.Shuffle.time_100000": {
            "code": "def time_100000(self):\n    np.random.shuffle(self.a)\n",
            "goal_time": 0.25,
            "name": "bench_random.Shuffle.time_100000",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_random.Shuffle.time_100000",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AddReduce.time_axis_0": {
            "code": "def time_axis_0(self):\n    [np.add.reduce(a, axis=0) for a in self.squares]\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AddReduce.time_axis_0",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.AddReduce.time_axis_0",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AddReduce.time_axis_1": {
            "code": "def time_axis_1(self):\n    [np.add.reduce(a, axis=1) for a in self.squares]\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AddReduce.time_axis_1",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.AddReduce.time_axis_1",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AddReduceSeparate.time_reduce": {
            "code": "def time_reduce(self, axis, typename):\n    np.add.reduce(self.a, axis=axis)\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AddReduceSeparate.time_reduce",
            "number": 0,
            "param_names": [
                "axis",
                "type"
            ],
            "params": [
                [
                    "0",
                    "1"
                ],
                [
                    "'int16'",
                    "'float16'",
                    "'int32'",
                    "'float32'",
                    "'int64'",
                    "'float64'",
                    "'complex64'",
                    "'longfloat'",
                    "'complex128'",
                    "'complex256'"
                ]
            ],
            "pretty_name": "bench_reduce.AddReduceSeparate.time_reduce",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AnyAll.time_all_fast": {
            "code": "def time_all_fast(self):\n    self.zeros.all()\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AnyAll.time_all_fast",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.AnyAll.time_all_fast",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AnyAll.time_all_slow": {
            "code": "def time_all_slow(self):\n    self.ones.all()\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AnyAll.time_all_slow",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.AnyAll.time_all_slow",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AnyAll.time_any_fast": {
            "code": "def time_any_fast(self):\n    self.ones.any()\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AnyAll.time_any_fast",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.AnyAll.time_any_fast",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.AnyAll.time_any_slow": {
            "code": "def time_any_slow(self):\n    self.zeros.any()\n",
            "goal_time": 0.25,
            "name": "bench_reduce.AnyAll.time_any_slow",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.AnyAll.time_any_slow",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.MinMax.time_max": {
            "code": "def time_max(self, dtype):\n    np.max(self.d)\n",
            "goal_time": 0.25,
            "name": "bench_reduce.MinMax.time_max",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'numpy.float32'>",
                    "<class 'numpy.float64'>",
                    "<class 'numpy.int64'>"
                ]
            ],
            "pretty_name": "bench_reduce.MinMax.time_max",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.MinMax.time_min": {
            "code": "def time_min(self, dtype):\n    np.min(self.d)\n",
            "goal_time": 0.25,
            "name": "bench_reduce.MinMax.time_min",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'numpy.float32'>",
                    "<class 'numpy.float64'>",
                    "<class 'numpy.int64'>"
                ]
            ],
            "pretty_name": "bench_reduce.MinMax.time_min",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_reduce.SmallReduction.time_small": {
            "code": "def time_small(self):\n    np.sum(self.d)\n",
            "goal_time": 0.25,
            "name": "bench_reduce.SmallReduction.time_small",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_reduce.SmallReduction.time_small",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_shape_base.Block.time_3d": {
            "code": "def time_3d(self, n):\n    np.block([\n        [\n            [self.a000, self.a001],\n            [self.a010, self.a011],\n        ],\n        [\n            [self.a100, self.a101],\n            [self.a110, self.a111],\n        ]\n    ])\n",
            "goal_time": 0.25,
            "name": "bench_shape_base.Block.time_3d",
            "number": 0,
            "param_names": [
                "size"
            ],
            "params": [
                [
                    "1",
                    "10",
                    "100"
                ]
            ],
            "pretty_name": "bench_shape_base.Block.time_3d",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_shape_base.Block.time_block_complicated": {
            "code": "def time_block_complicated(self, n):\n    np.block([[self.one_2d, self.two_2d],\n              [self.three_2d],\n              [self.four_1d],\n              [self.five_0d, self.six_1d],\n              [self.zero_2d]])\n",
            "goal_time": 0.25,
            "name": "bench_shape_base.Block.time_block_complicated",
            "number": 0,
            "param_names": [
                "size"
            ],
            "params": [
                [
                    "1",
                    "10",
                    "100"
                ]
            ],
            "pretty_name": "bench_shape_base.Block.time_block_complicated",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_shape_base.Block.time_block_simple_column_wise": {
            "code": "def time_block_simple_column_wise(self, n):\n    np.block([[self.a_2d], [self.b_2d]])\n",
            "goal_time": 0.25,
            "name": "bench_shape_base.Block.time_block_simple_column_wise",
            "number": 0,
            "param_names": [
                "size"
            ],
            "params": [
                [
                    "1",
                    "10",
                    "100"
                ]
            ],
            "pretty_name": "bench_shape_base.Block.time_block_simple_column_wise",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_shape_base.Block.time_block_simple_row_wise": {
            "code": "def time_block_simple_row_wise(self, n):\n    np.block([self.a_2d, self.b_2d])\n",
            "goal_time": 0.25,
            "name": "bench_shape_base.Block.time_block_simple_row_wise",
            "number": 0,
            "param_names": [
                "size"
            ],
            "params": [
                [
                    "1",
                    "10",
                    "100"
                ]
            ],
            "pretty_name": "bench_shape_base.Block.time_block_simple_row_wise",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_shape_base.Block.time_nested": {
            "code": "def time_nested(self, n):\n    np.block([\n        [\n            np.block([\n               [self.one],\n               [self.three],\n               [self.four]\n            ]),\n            self.two\n        ],\n        [self.five, self.six],\n        [self.zero]\n    ])\n",
            "goal_time": 0.25,
            "name": "bench_shape_base.Block.time_nested",
            "number": 0,
            "param_names": [
                "size"
            ],
            "params": [
                [
                    "1",
                    "10",
                    "100"
                ]
            ],
            "pretty_name": "bench_shape_base.Block.time_nested",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_shape_base.Block.time_no_lists": {
            "code": "def time_no_lists(self, n):\n    np.block(1)\n    np.block(np.eye(3 * n))\n",
            "goal_time": 0.25,
            "name": "bench_shape_base.Block.time_no_lists",
            "number": 0,
            "param_names": [
                "size"
            ],
            "params": [
                [
                    "1",
                    "10",
                    "100"
                ]
            ],
            "pretty_name": "bench_shape_base.Block.time_no_lists",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Broadcast.time_broadcast": {
            "code": "def time_broadcast(self):\n    self.d - self.e\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Broadcast.time_broadcast",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Broadcast.time_broadcast",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Custom.time_and_bool": {
            "code": "def time_and_bool(self):\n    (self.b & self.b)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Custom.time_and_bool",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Custom.time_and_bool",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Custom.time_nonzero": {
            "code": "def time_nonzero(self):\n    np.nonzero(self.b)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Custom.time_nonzero",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Custom.time_nonzero",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Custom.time_not_bool": {
            "code": "def time_not_bool(self):\n    (~self.b)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Custom.time_not_bool",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Custom.time_not_bool",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Custom.time_or_bool": {
            "code": "def time_or_bool(self):\n    (self.b | self.b)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Custom.time_or_bool",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Custom.time_or_bool",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_char_or": {
            "code": "def time_char_or(self):\n    np.bitwise_or(self.c, 0, out=self.c)\n    np.bitwise_or(0, self.c, out=self.c)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_char_or",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_char_or",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_char_or_temp": {
            "code": "def time_char_or_temp(self):\n    0 | self.c | 0\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_char_or_temp",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_char_or_temp",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_double_add": {
            "code": "def time_double_add(self):\n    np.add(self.d, 1., out=self.d)\n    np.add(1., self.d, out=self.d)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_double_add",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_double_add",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_double_add_temp": {
            "code": "def time_double_add_temp(self):\n    1. + self.d + 1.\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_double_add_temp",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_double_add_temp",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_float_add": {
            "code": "def time_float_add(self):\n    np.add(self.f, 1., out=self.f)\n    np.add(1., self.f, out=self.f)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_float_add",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_float_add",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_float_add_temp": {
            "code": "def time_float_add_temp(self):\n    1. + self.f + 1.\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_float_add_temp",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_float_add_temp",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_int_or": {
            "code": "def time_int_or(self):\n    np.bitwise_or(self.i, 0, out=self.i)\n    np.bitwise_or(0, self.i, out=self.i)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_int_or",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_int_or",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomInplace.time_int_or_temp": {
            "code": "def time_int_or_temp(self):\n    0 | self.i | 0\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomInplace.time_int_or_temp",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.CustomInplace.time_int_or_temp",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomScalar.time_add_scalar2": {
            "code": "def time_add_scalar2(self, dtype):\n    np.add(self.d, 1)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomScalar.time_add_scalar2",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'numpy.float32'>",
                    "<class 'numpy.float64'>"
                ]
            ],
            "pretty_name": "bench_ufunc.CustomScalar.time_add_scalar2",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomScalar.time_divide_scalar2": {
            "code": "def time_divide_scalar2(self, dtype):\n    np.divide(self.d, 1)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomScalar.time_divide_scalar2",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'numpy.float32'>",
                    "<class 'numpy.float64'>"
                ]
            ],
            "pretty_name": "bench_ufunc.CustomScalar.time_divide_scalar2",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomScalar.time_divide_scalar2_inplace": {
            "code": "def time_divide_scalar2_inplace(self, dtype):\n    np.divide(self.d, 1, out=self.d)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomScalar.time_divide_scalar2_inplace",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'numpy.float32'>",
                    "<class 'numpy.float64'>"
                ]
            ],
            "pretty_name": "bench_ufunc.CustomScalar.time_divide_scalar2_inplace",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.CustomScalar.time_less_than_scalar2": {
            "code": "def time_less_than_scalar2(self, dtype):\n    (self.d < 1)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.CustomScalar.time_less_than_scalar2",
            "number": 0,
            "param_names": [
                "dtype"
            ],
            "params": [
                [
                    "<class 'numpy.float32'>",
                    "<class 'numpy.float64'>"
                ]
            ],
            "pretty_name": "bench_ufunc.CustomScalar.time_less_than_scalar2",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Scalar.time_add_scalar": {
            "code": "def time_add_scalar(self):\n    (self.x + self.x)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Scalar.time_add_scalar",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Scalar.time_add_scalar",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Scalar.time_add_scalar_conv": {
            "code": "def time_add_scalar_conv(self):\n    (self.x + 1.0)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Scalar.time_add_scalar_conv",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Scalar.time_add_scalar_conv",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.Scalar.time_add_scalar_conv_complex": {
            "code": "def time_add_scalar_conv_complex(self):\n    (self.y + self.z)\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.Scalar.time_add_scalar_conv_complex",
            "number": 0,
            "param_names": [],
            "params": [],
            "pretty_name": "bench_ufunc.Scalar.time_add_scalar_conv_complex",
            "repeat": 0,
            "timeout": 60.0,
            "type": "time",
            "unit": "seconds"
        },
        "bench_ufunc.UFunc.time_ufunc_types": {
            "code": "def time_ufunc_types(self, ufuncname):\n    [self.f(*arg) for arg in self.args]\n",
            "goal_time": 0.25,
            "name": "bench_ufunc.UFunc.time_ufunc_types",
            "number": 0,
            "param_names": [
                "ufunc"
            ],
            "params": [
                [
                    "'abs'",
                    "'absolute'",
                    "'add'",
                    "'arccos'",
                    "'arccosh'",
                    "'arcsin'",
                    "'arcsinh'",
                    "'arctan'",
                    "'arctan2'",
                    "'arctanh'",
                    "'bitwise_and'",
                    "'bitwise_not'",
                    "'bitwise_or'",
                    "'bitwise_xor'",
                    "'cbrt'",
                    "'ceil'",
                    "'conj'",
                    "'conjugate'",
                    "'copysign'",
                    "'cos'",
                    "'cosh'",
                    "'deg2rad'",
                    "'degrees'",
                    "'divide'",
                    "'divmod'",
                    "'equal'",
                    "'exp'",
                    "'exp2'",
                    "'expm1'",
                    "'fabs'",
                    "'float_power'",
                    "'floor'",
                    "'floor_divide'",
                    "'fmax'",
                    "'fmin'",
                    "'fmod'",
                    "'frexp'",
                    "'greater'",
                    "'greater_equal'",
                    "'heaviside'",
                    "'hypot'",
                    "'invert'",
                    "'isfinite'",
                    "'isinf'",
                    "'isnan'",
                    "'isnat'",
                    "'ldexp'",
                    "'left_shift'",
                    "'less'",
                    "'less_equal'",
                    "'log'",
                    "'log10'",
                    "'log1p'",
                    "'log2'",
                    "'logaddexp'",
                    "'logaddexp2'",
                    "'logical_and'",
                    "'logical_not'",
                    "'logical_or'",
                    "'logical_xor'",
                    "'maximum'",
                    "'minimum'",
                    "'mod'",
                    "'modf'",
                    "'multiply'",
                    "'negative'",
                    "'nextafter'",
                    "'not_equal'",
                    "'positive'",
                    "'power'",
                    "'rad2deg'",
                    "'radians'",
                    "'reciprocal'",
                    "'remainder'",
                    "'right_shift'",
                    "'rint'",
                    "'sign'",
                    "'signbit'",
                    "'sin'",
                    "'sinh'",
                    "'spacing'",
                    "'sqrt'",
                    "'square'",
                    "'subtract'",
                    "'tan'",
                    "'tanh'",
                    "'true_divide'",
                    "'trunc'"
                ]
            ],
            "pretty_name": "bench_ufunc.UFunc.time_ufunc_types",
            "repeat": 0,
            "timeout": 10,
            "type": "time",
            "unit": "seconds"
        }
    },
    "graph_param_list": [
        {
            "arch": "x86_64",
            "branch": "pad",
            "cpu": "Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz",
            "machine": "nblg",
            "os": "Linux 4.14.34-1-MANJARO",
            "python": "3.6",
            "ram": "8048320",
            "six": ""
        }
    ],
    "hash_length": 8,
    "machines": {
        "nblg": {
            "arch": "x86_64",
            "cpu": "Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz",
            "machine": "nblg",
            "os": "Linux 4.14.34-1-MANJARO",
            "ram": "8048320",
            "version": 1
        }
    },
    "pages": [
        [
            "",
            "Grid view",
            "Display as a agrid"
        ],
        [
            "summarylist",
            "List view",
            "Display as a list"
        ],
        [
            "regressions",
            "Show regressions",
            "Display information about recent regressions"
        ]
    ],
    "params": {
        "arch": [
            "x86_64"
        ],
        "branch": [
            "pad"
        ],
        "cpu": [
            "Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz"
        ],
        "machine": [
            "nblg"
        ],
        "os": [
            "Linux 4.14.34-1-MANJARO"
        ],
        "python": [
            "3.6"
        ],
        "ram": [
            "8048320"
        ],
        "six": [
            ""
        ]
    },
    "project": "numpy",
    "project_url": "http://numpy.org/",
    "revision_to_date": {
        "42": 1010250430000,
        "740": 1080942012000,
        "760": 1081968728000,
        "871": 1097349846000,
        "1215": 1129103142000,
        "1435": 1131769706000,
        "1441": 1131851529000,
        "1591": 1134458827000,
        "1767": 1136491532000,
        "1916": 1137917799000,
        "2054": 1140130368000,
        "2167": 1142327266000,
        "2472": 1148854131000,
        "2788": 1153471716000,
        "2916": 1155540872000,
        "2949": 1156194384000,
        "2986": 1156794775000,
        "3015": 1157428144000,
        "3096": 1158779673000,
        "3192": 1160425354000,
        "3259": 1161233179000,
        "3290": 1161767157000,
        "3366": 1165042730000,
        "3543": 1175637762000,
        "3724": 1180631535000,
        "3846": 1187462962000,
        "3983": 1194559578000,
        "4589": 1211082979000,
        "4635": 1211787689000,
        "4881": 1216657071000,
        "4904": 1216831681000,
        "4948": 1217537675000,
        "4998": 1218608267000,
        "5005": 1218666290000,
        "5090": 1220400184000,
        "5144": 1221033369000,
        "5203": 1222317976000,
        "5277": 1225192990000,
        "5964": 1237357434000,
        "6082": 1238247937000,
        "6105": 1238767315000,
        "6111": 1238907901000,
        "7077": 1259629925000,
        "7287": 1261409435000,
        "7290": 1261963508000,
        "7596": 1271580439000,
        "7601": 1271583582000,
        "7605": 1271594530000,
        "7607": 1271932516000,
        "7838": 1280662582000,
        "7900": 1282045592000,
        "7919": 1282740471000,
        "7924": 1283257801000,
        "8049": 1287297181000,
        "8077": 1289224772000,
        "8094": 1290078864000,
        "8515": 1300868697000,
        "8649": 1301858926000,
        "8733": 1303929670000,
        "8748": 1304439777000,
        "8759": 1304793730000,
        "8765": 1305358911000,
        "8847": 1307957944000,
        "8956": 1309549599000,
        "9026": 1310325134000,
        "9071": 1311186558000,
        "9830": 1336165331000,
        "9876": 1337434901000,
        "9952": 1340207109000,
        "10100": 1345509889000,
        "10201": 1348118703000,
        "10586": 1356729952000,
        "10683": 1358806942000,
        "10713": 1360182042000,
        "10714": 1360443096000,
        "10894": 1364150879000,
        "10952": 1365311159000,
        "11907": 1378050610000,
        "11963": 1378665363000,
        "12166": 1380482446000,
        "12280": 1381686735000,
        "12411": 1383002462000,
        "12438": 1383485948000,
        "12590": 1388487707000,
        "13048": 1393769459000,
        "13148": 1394750047000,
        "13266": 1395783838000,
        "13574": 1402237862000,
        "13746": 1406747979000,
        "13794": 1407263229000,
        "13799": 1407580724000,
        "13857": 1409154091000,
        "13918": 1410080234000,
        "14134": 1414340499000,
        "14153": 1414930922000,
        "14443": 1422808828000,
        "14555": 1425216987000,
        "15167": 1439313035000,
        "15308": 1442856145000,
        "15380": 1443496521000,
        "15429": 1444097817000,
        "15442": 1444246477000,
        "15495": 1444660531000,
        "15747": 1447359318000,
        "15860": 1449535709000,
        "15898": 1450120843000,
        "16072": 1452119720000,
        "16076": 1452133260000,
        "16292": 1453770183000,
        "16308": 1454010965000,
        "16415": 1455061855000,
        "16528": 1456185152000,
        "16649": 1458424675000,
        "16687": 1459109632000,
        "16880": 1464312772000,
        "16984": 1466868751000,
        "17222": 1473642948000,
        "17275": 1475538767000,
        "17440": 1479339043000,
        "17557": 1482099063000,
        "17581": 1482185626000,
        "17614": 1483298534000,
        "17655": 1484509772000,
        "17960": 1488844343000,
        "17996": 1489850965000,
        "18413": 1494454540000,
        "18465": 1495130479000,
        "18526": 1496849195000,
        "18677": 1499381877000,
        "19120": 1506523104000,
        "19139": 1506715810000,
        "19601": 1513126148000,
        "19763": 1515268836000,
        "20039": 1519161772000,
        "20123": 1520870266000,
        "20432": 1524857809000,
        "20707": 1528296187000,
        "20770": 1528825313000,
        "20810": 1529121917000,
        "20816": 1529136167000,
        "20824": 1529188833000,
        "20826": 1529236395000,
        "20827": 1529236810000,
        "20834": 1529265061000,
        "20874": 1529537186000,
        "20889": 1529315274000,
        "20890": 1529742996000,
        "20894": 1529743916000,
        "20895": 1529920528000,
        "20896": 1529920679000,
        "20897": 1529923985000,
        "20898": 1529926032000,
        "20899": 1529927249000,
        "20900": 1529929641000,
        "20918": 1530220075000,
        "20920": 1530266395000,
        "20921": 1530267796000,
        "20943": 1530473328000
    },
    "revision_to_hash": {
        "42": "e8c50dc6676e380e814c77927445ab3594382bc4",
        "740": "d8e22e7e6479aa38b62c53f14ebaf98328131061",
        "760": "3cb02b56a10d3fe8cf6a7ae7b36e9a2f52661c2e",
        "871": "957cf7970b0d2b2c600ae6459fb45db8ef498de1",
        "1215": "ac4db180f8cab1d302e699426a7257ec6b0df426",
        "1435": "5ac24f59ed0053f58781d198e64e6ebe6dbe1d69",
        "1441": "513d80a5a37a3f6e7bb31e4fc4437fd229d8906c",
        "1591": "2efca402e8c6aae80ec131fa350c04e5463c8692",
        "1767": "cbec6098bf702e19d2923d15d420e9410d94bf5c",
        "1916": "c79bcec14a12a38a1563d1189324257e5df71397",
        "2054": "3a01f1da914f586ade80cad147d6ea6781d08265",
        "2167": "d99b776ffb2a6d5718bfdb7f17b46c06a3dc84fc",
        "2472": "9da998fd005e4d4774cd7f0152490a5bf8c35c99",
        "2788": "6dd69530d58ba65f4a37167ddec7c9cf19e44c18",
        "2916": "87596eef24789199f98b502559f110cecdd05025",
        "2949": "cc6bed52164cf955d56081835e1790622220ca62",
        "2986": "64be3e2a89c72a8b23ad11b3719bd66725658c61",
        "3015": "c90202ce60184a803b311754b26f1386bcf1757f",
        "3096": "56ac5f7711cc399db40738a625d2f33f24fb6166",
        "3192": "f25e1581827ee3ec98518fe3ad7b855904202383",
        "3259": "c9d632d3d112854a7a865762097dedc6535a41ed",
        "3290": "3301a33d6b8daa647ff744b1e6302705de5d67ba",
        "3366": "1a6b656657baa12f6e3ab41ebb731e2a162f262c",
        "3543": "9d647f6a0b2f1583ac4e1f9542523ac9db565d45",
        "3724": "2be238df5e6682083c448264e52d2d8df0055e9c",
        "3846": "8410a4199e0efea7f56ed474c9754cf4895695b2",
        "3983": "cd8db12913c9bd7323b77a03a8fa11667634b1a9",
        "4589": "d83d143053c28864fd9762b8892cb78f7b58f927",
        "4635": "e43987ae07a1e3ba4b1fb63273069028e4e3d2ce",
        "4881": "b38e5c2a3b7841aad8df6af35c8e49400ad5b5d9",
        "4904": "54bb7abd3adc59578c559acb2d2938ae42b401a1",
        "4948": "6727624e1c42177c0a60a1baf9e46c41ccbdcf20",
        "4998": "ff040d986da26c846c3b865afa99e0f6ced82b7a",
        "5005": "68072bf7d9c57895ebe51cfca2aaac52506faec2",
        "5090": "c29e590ee6bdde6168216642285828fa140c0205",
        "5144": "ad3f9e63e0598351c51bed7c4686300527f2488d",
        "5203": "f5596a9d809fbba266aad1702fd048f1de32d1f0",
        "5277": "d4f826b4bafeea0e4a16b2cb3954b2155483e91a",
        "5964": "480b20bb72547d35f91a79c2c1bc6166316a56d3",
        "6082": "efc49bb76f9d9eacb3825d6f42ba283e0c0985c2",
        "6105": "2f9063f598515a2708decd55a13cd5672851047f",
        "6111": "c3e0147d49286c0cb1b65a95d42f5eb4a4779129",
        "7077": "94a1fa8166f715024c3ace71ef25b8498d0c8661",
        "7287": "76b40e882632f60ecc600770c8eee8d4594754b8",
        "7290": "4b42c8f6b81d87f35ed8dcf4430224992cf2d296",
        "7596": "c7ba5001b484eb7565f3a4b1fecadb81f74884bd",
        "7601": "2edbff0a555835435e19e22fd3e80a522b2beb70",
        "7605": "05cc071eb092c3953d26dfd53831f9828596cf6c",
        "7607": "351726ab14cf919aab55fb91608f6448bb063609",
        "7838": "1ddfa53167695671adbd72de056ae9d30f5c20f7",
        "7900": "9673b8f82442d84bcdc22690d44ab4d30dabcc81",
        "7919": "d68b2318454e777a3ae41df019bbed86fdf00f4a",
        "7924": "c069eee07f2a976b3c2660670dc7bca6438ee94f",
        "8049": "97cb28e72124ff621958127fde68e1327ac2e324",
        "8077": "33047912898fb4e15045e8940b0988fb1e474de2",
        "8094": "de969d7f94ddfc1854565518d5da61fbfc8bf4a3",
        "8515": "cd6c14be42c149730349ba551d8083f3c08b9c73",
        "8649": "9b2031f636545bf8e91e59770eb284f56d2a04fd",
        "8733": "65bcb41240e260e5f8c85e4e30a8f6bc68c72567",
        "8748": "ceba67b52a8c9ad7ce36553add4506d84a70ad30",
        "8759": "1e85f6fd045dd75a0697bed5bb619fb792632da2",
        "8765": "039ceba764704d0b4182cd2ecd6b88242f792804",
        "8847": "b11e3af9487cf3342bbad742231c312a02398f91",
        "8956": "9b46e7b7c47cb676999014cbb93709a12e7d63e3",
        "9026": "41fa279b579c68ac5f5991800034ba94c7ca8b50",
        "9071": "68538b74483009c2c2d1644ef00397014f95a696",
        "9830": "09bb26867d73173d74b4f9d4d481064e6044fa71",
        "9876": "ca07bce202ae26b6f0a73870eb2ef0b88e0210c5",
        "9952": "651ef74c4ebe7d24e727fd444b1985117ef16fae",
        "10100": "50366a2ac0d6158e4434ec5e5b4a9a521610628b",
        "10201": "f2175177b060d01ec5bf6f7e038d71563995fb42",
        "10586": "1cd02e093d4a27ff526dfffa2152a67e93817fbd",
        "10683": "e0e3a8732859639917be89f525bd359cf8d608d7",
        "10713": "a43307cdcc06a358097a9e88de388409a5b99735",
        "10714": "0c5a166183764aeb3fd1fba799caea489f20682f",
        "10894": "21bda0e23c6d2e02776e00268bcfee71740f3580",
        "10952": "697316a867a32e9f72778a29226c9febbf867ee8",
        "11907": "1bcc80257c94427436eea2e50c70c78179ed1fb9",
        "11963": "4777d09b39ac0a331e1ac9578e3a754c0e084574",
        "12166": "260e8f26f8f808e473f1c839411e28bd33edae4e",
        "12280": "0ccaab00ba14eebeb6620e6c64723189e2bd0a11",
        "12411": "a60b3901cd635d28bef8328e83bafd35ce631e08",
        "12438": "3bf8706cefd28d33fb3ea1915d8a11f54ee7cfef",
        "12590": "4322701029c8bf1d87203cafe781a0128dd86a62",
        "13048": "23f8dcf86cf692fcc9dce48350d5d86c0bc63ada",
        "13148": "48c77a64aba109de54d90f103203f1990325c37c",
        "13266": "62a7575fd82ddf028517780c01fecf7e0cca27aa",
        "13574": "96b4349da97fd49fb04b678ce16897101677b09f",
        "13746": "faa6fa074c966cf30b68b2244bb55691edb1bba1",
        "13794": "c7ad14f5f3069e93a674e0ddf260d7da6c71a5a7",
        "13799": "4563730a2d036307f1b67b2856d749aabdd8d546",
        "13857": "36d947fe379e7534624328f7382e4e1175823170",
        "13918": "07601a64cdfeb1c0247bde1294ad6380413cab66",
        "14134": "c88fd91482782f35a78d6144331471085b8695b0",
        "14153": "d44b9c61499f8bc5a9fc94286cd52f05e15e003f",
        "14443": "c04513ca87f3471c407d00fa3be9d456cc34a1a3",
        "14555": "762c6f15bf57506e21239a4dd68192e4da6014f7",
        "15167": "b9640613ddeaa5993916718ebec8c71d4001d489",
        "15308": "edb902cdc6573553afcf11047ecdfb447e444322",
        "15380": "2c24d62c775dac583235606a396b4966a3f1144c",
        "15429": "183fdb290cd46b1f01303d24ac0c9fc3ff24fe05",
        "15442": "e905cad9646ad65316458bbc7f5c83a9d5ec8728",
        "15495": "f769c64026f5ff993ec1e28cbd9f39b8da75347d",
        "15747": "90d1f8fb7e43a1c6664d6a1a05d01d9fafbfc7ea",
        "15860": "c16af049301ed0a88c57e403854f90725a4a8a7d",
        "15898": "5667fbafb5d84e3a412a07aac72c769baa590579",
        "16072": "ea8aa221f98d0bbd24884e9d6e31fbb613f478f1",
        "16076": "e46c2d78a27f25e66624a818276be57ef9458e60",
        "16292": "2d1d5c4535bd6df34bed4bf304e253667abf8096",
        "16308": "66e91fdef4755075689f63e55732d512deb955f2",
        "16415": "fe0231d5e5256696c9aa923e62e0ca1d02223b40",
        "16528": "f2756423f00b03063c9424f014ee814ae2ac2884",
        "16649": "199dc1a43a37adbc0d92f58574494ed80a1fed25",
        "16687": "4092a9e160cc247a4a45724579a0c829733688ca",
        "16880": "abcb51151634c09b0db4eb462939f910555b7971",
        "16984": "ccc6b8d8fcf92cc6dc19f7e14d91fc6c127114a6",
        "17222": "fe3e46d2876af2546a5fcc752ead8aa736ea2658",
        "17275": "bb6e3dc30016b89bf154f7d7fce4248e760bd40f",
        "17440": "67551112fa684d1686ed173eb9724a4b8a7a86fa",
        "17557": "bfc9a059c48c57c4ef20bebe88d6f6ce363d1464",
        "17581": "4cf6f18cff3a4080c6a53e5c2bd63e6b9bf7e5db",
        "17614": "75d28bb59899eedcb83bd8e38be708a9cc5958e7",
        "17655": "561f1accf861ad8606ea2dd723d2be2b09a2dffa",
        "17960": "61e667e4a6b6e55356dc97d2f66eb7afb4a69b55",
        "17996": "11f77c8b19dae99981910695a806cbf4def67e24",
        "18413": "d6ab6da640156e4a75a78d5d6e7f25a098b5f52b",
        "18465": "59aec750c677b348dce102bc6fa1e6f9395362b8",
        "18526": "e94ed84010c60961f82860d146681d3fd607de4e",
        "18677": "1462df1c20eae44d28e6b665b5d194788f57efc5",
        "19120": "cde88ddf408f41ca2669adc4401fb69682726a55",
        "19139": "31465473c491829d636c9104c390062cba005681",
        "19601": "d64539a97a7d21857b71e181f848a17d15a48ef7",
        "19763": "6914bb41f0fb3c1ba500bae4e7d671da9536786f",
        "20039": "7dcee7a469ad1bbfef1cd8980dc18bf5869c5391",
        "20123": "6a58e25703cbecb6786faa09a04ae2ec8221348b",
        "20432": "73299826729be58cec179b52c656adfcaefada93",
        "20707": "83419d6462461110035fa27e322efed557c739ac",
        "20770": "d3348c1123d3862a42d50a7fee14e50b268944a4",
        "20810": "bf4a3e59b0cfb1e999845dc5228dfa1f54851b9f",
        "20816": "a1d33d297282d4dc331cb00b018fa08036373c99",
        "20824": "387c08972f2ccc441312006ac68dc4d553d8be8f",
        "20826": "df0a9367aefa75c4612c4fb37ef2faa62644aa36",
        "20827": "42930a69a6f1f835b62caeac57df7e067b52d48e",
        "20834": "028c3a8c931fc3c6cfa17726a9a5a5d1d415efe0",
        "20874": "7850096157436c650803e8ea6d98ec0d42d96102",
        "20889": "e58a83efe3d3c4806012b4efb461b464370e1013",
        "20890": "e2700fd6d1c5758186eeaa446dff72bde2e72c17",
        "20894": "5bacfdb0c7f7aaf95ef2a3833b994f9cbb7e97e7",
        "20895": "50ed75d6b5269a0ccdd4131a2861c9d1a4bdcd94",
        "20896": "f55a79ce22e139f343b6787a4500e492c52ad6d2",
        "20897": "4fa818b5208c72e85e39bb13fa36cc9257ec9b01",
        "20898": "a07844432c5c323b6507437833d009fa05fbbe69",
        "20899": "9966caadac55bd1cc65899b1c8f56f5bffd59b83",
        "20900": "b0d32eb0b52e74f1561c3093cc25df8fb73bcda6",
        "20918": "bc1d2b64a23578b2c43fcbc6376e30740a33df06",
        "20920": "3619d1d430ced997846301759dbb21be9712677f",
        "20921": "b63649650a80628f84e6797a8dbe310c59bb086e",
        "20943": "48fa3a946981307614310daea4b2c33ce31f10cf"
    },
    "show_commit_url": "https://github.com/numpy/numpy/commit/",
    "tags": {
        "enable_separate_by_default": 10683,
        "pre-removal-numpybook": 13148,
        "v0.2.0": 42,
        "v0.2.2": 740,
        "v0.3.0": 760,
        "v0.3.2": 871,
        "v0.4.2b1": 1215,
        "v0.6.0": 1435,
        "v0.6.1": 1441,
        "v0.8.4": 1591,
        "v0.9.2": 1767,
        "v0.9.4": 1916,
        "v0.9.5": 2054,
        "v0.9.6": 2167,
        "v0.9.8": 2472,
        "v1.0": 3290,
        "v1.0.1": 3366,
        "v1.0.2": 3543,
        "v1.0.3": 3724,
        "v1.0.3.1": 3846,
        "v1.0.4": 3983,
        "v1.0b1": 2788,
        "v1.0b2": 2916,
        "v1.0b3": 2949,
        "v1.0b4": 2986,
        "v1.0b5": 3015,
        "v1.0rc1": 3096,
        "v1.0rc2": 3192,
        "v1.0rc3": 3259,
        "v1.1.0": 4635,
        "v1.1.0rc1": 4589,
        "v1.1.1": 4948,
        "v1.1.1rc1": 4881,
        "v1.1.1rc2": 4904,
        "v1.10.0": 15429,
        "v1.10.0.post2": 15442,
        "v1.10.0b1": 15167,
        "v1.10.0rc2": 15380,
        "v1.10.1": 15495,
        "v1.10.2": 15898,
        "v1.10.2rc1": 15747,
        "v1.10.2rc2": 15860,
        "v1.10.3": 16072,
        "v1.10.4": 16076,
        "v1.11.0": 16687,
        "v1.11.0b1": 16292,
        "v1.11.0b2": 16308,
        "v1.11.0b3": 16415,
        "v1.11.0rc1": 16528,
        "v1.11.0rc2": 16649,
        "v1.11.1": 16984,
        "v1.11.1rc1": 16880,
        "v1.11.2": 17275,
        "v1.11.2rc1": 17222,
        "v1.11.3": 17557,
        "v1.12.0": 17655,
        "v1.12.0b1": 17440,
        "v1.12.0rc1": 17581,
        "v1.12.0rc2": 17614,
        "v1.12.1": 17996,
        "v1.12.1rc1": 17960,
        "v1.13.0": 18526,
        "v1.13.0rc1": 18413,
        "v1.13.0rc2": 18465,
        "v1.13.1": 18677,
        "v1.13.2": 19120,
        "v1.13.3": 19139,
        "v1.14.0": 19763,
        "v1.14.0rc1": 19601,
        "v1.14.1": 20039,
        "v1.14.2": 20123,
        "v1.14.3": 20432,
        "v1.14.4": 20707,
        "v1.14.5": 20770,
        "v1.15.0rc1": 20874,
        "v1.2.0": 5203,
        "v1.2.0b1": 4998,
        "v1.2.0b2": 5005,
        "v1.2.0rc1": 5090,
        "v1.2.0rc2": 5144,
        "v1.2.1": 5277,
        "v1.3.0": 6111,
        "v1.3.0b1": 5964,
        "v1.3.0rc1": 6082,
        "v1.3.0rc2": 6105,
        "v1.4.0": 7290,
        "v1.4.0rc1": 7077,
        "v1.4.0rc2": 7287,
        "v1.4.1": 7607,
        "v1.4.1rc1": 7596,
        "v1.4.1rc2": 7601,
        "v1.4.1rc3": 7605,
        "v1.5.0": 7924,
        "v1.5.0b1": 7838,
        "v1.5.0b2": 7900,
        "v1.5.0rc1": 7919,
        "v1.5.1": 8094,
        "v1.5.1rc1": 8049,
        "v1.5.1rc2": 8077,
        "v1.6.0": 8765,
        "v1.6.0b1": 8515,
        "v1.6.0b2": 8649,
        "v1.6.0rc1": 8733,
        "v1.6.0rc2": 8748,
        "v1.6.0rc3": 8759,
        "v1.6.1": 9071,
        "v1.6.1rc1": 8847,
        "v1.6.1rc2": 8956,
        "v1.6.1rc3": 9026,
        "v1.6.2": 9876,
        "v1.6.2rc1": 9830,
        "v1.7.0": 10714,
        "v1.7.0b1": 10100,
        "v1.7.0b2": 10201,
        "v1.7.0rc1": 10586,
        "v1.7.0rc2": 10713,
        "v1.7.1": 10952,
        "v1.7.1rc1": 10894,
        "v1.7.2": 12590,
        "v1.7.2rc1": 12438,
        "v1.8.0": 12411,
        "v1.8.0b1": 11907,
        "v1.8.0b2": 11963,
        "v1.8.0rc1": 12166,
        "v1.8.0rc2": 12280,
        "v1.8.1": 13266,
        "v1.8.1rc1": 13048,
        "v1.8.2": 13799,
        "v1.8.2rc1": 13794,
        "v1.9.0": 13918,
        "v1.9.0b1": 13574,
        "v1.9.0b2": 13746,
        "v1.9.0rc1": 13857,
        "v1.9.1": 14153,
        "v1.9.1rc1": 14134,
        "v1.9.2": 14555,
        "v1.9.2rc1": 14443,
        "v1.9.3": 15308,
        "with_maskna": 9952
    }
}